#!/usr/bin/ruby

unless ARGV.length == 1
    abort "USAGE: #{__FILE__} [CHEF FILE]"
end

$HEADER = <<END_OF_HEADER
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <time.h>

$$DESCRIPTION$$

#define ERROR(m...) fprintf(stderr, "%s\\n", m)

enum { DRY=0, LIQUID };

typedef struct {
	int64_t value;
	uint8_t state : 1;
} ingredient;

typedef struct {
    ingredient* stack;
    uint16_t length;
} bowl;

typedef bowl bakingDish;

ingredient Ingredient(int64_t val, uint8_t state) {

  ingredient r;
	r.value = val;

	if(state != 0 && state != 1) {

    ERROR("State must be either DRY(0) or LIQUID(1)");
		exit(1);

    }

	return r;

}

void swapIngredients(ingredient* a, ingredient* b) {
    ingredient temp = *a;
    *a = *b;
    *b = temp;
}

void mbput(bowl b, ingredient i) {

    if(!b.stack)
        b.stack = malloc( sizeof(ingredient) * ++b.length );
    else
        b.stack = realloc( b.stack, sizeof(ingredient) * ++b.length );

    for(int el = b.length - 2; el >= 0; el--)
        b.stack[el+1] = b.stack[el];

    *(b.stack) = i;

}

void mbfold(bowl b, ingredient i) {

    if(!b.stack) {

        ERROR("Tried to remove ingredient from bowl, but bowl was already empty");
        exit(1);

    }

    i.value = b.stack[0].value;

    for(int el = 0; el <= b.length - 2; el++)
        b.stack[el] = b.stack[el - 1];

    b.stack = realloc(b.stack, sizeof(ingredient) * --b.length);

}

void mbadd(bowl b, ingredient i) {

    b.stack[0].value += i.value;

}

void mbremove(bowl b, ingredient i) {

    b.stack[0].value -= i.value;

}

void mbcombine(bowl b, ingredient i) {

    b.stack[0].value *= i.value;

}

void mbdivide(bowl b, ingredient i) {

    b.stack[0].value /= i.value;

}

void mbliquefy(bowl b) {

    for(int i = 0; i < b.length; i++)
        b.stack[i].state = LIQUID;

}

void liquefy(ingredient i) {
    i.state = LIQUID;
}

void mbstir(bowl b, uint8_t times) {

    times %= b.length;

    if(times == 0) return;

    ingredient temp;

    for(int i = 0; i <= times - 1; i++) {
        swapIngredients(
            &(b.stack[i%b.length]),
            &(b.stack[(i+1)%b.length])
        );
    }

}

void mbmix(bowl b) {

    srandom(time(NULL));

    for(int i = 0; i < b.length; i++) {
        swapIngredients(
            &(b.stack[i]),
            &(b.stack[random() % b.length])
        );
    }

}

void mbclean(bowl b) {

    b.length = 0;
    free(b.stack);

}

void mbpour(bowl b, bakingDish p) {

    p.length += b.length;
    if(!p.stack)
        p.stack = malloc(sizeof(ingredient) * p.length);
    else
        p.stack = realloc(p.stack, sizeof(ingredient) * p.length);

    for(int b_ex = 0; b_ex < b.length; b_ex++)
        for(int el = 0; el <= b.length - 2; el++)
            p.stack[el] = p.stack[el - 1];

    for(int el = 0; el < b.length; el++)
        p.stack[el] = b.stack[el];

}

END_OF_HEADER

# PARSING BEGIN

$content = open(ARGV[0], &:read)
$content.gsub!(/Pre-heat\s+oven\s+to\s+\d+\s+degrees\s+Celsius\.|Cooking\s+time:\s+\d+\s+minutes\./, "")

CRLF = $content[$content.index(?\n)-1] == ?\r

$content = (CRLF ? $content.split("\r\n\r\n") : $content.split("\n\n")).map(&:strip)

CMethod = Struct.new(*(%w(name vars content).map(&:to_sym)))

cmethods = [ ]

while $content.select{ |i| i.match(/Ingredients\.\n/m) != nil }

  ingr_start = $content.map{ |i| i.match(/Ingredients\.\n/m) != nil }.index(true)

  the_method = CMethod.new(cmethods == [] ? "main" : "", [], []) # TODO METHOD NAME!!

  ingredients = $content[ingr_start].scan(
    /(\d+)\s+((?:heaped\s+|level\s+)?(?:k?g|pinch(?:es)?|m?l|dash(?:es)?|(?:cup|teaspoon|tablespoon)s?)\s+)?([^0-9\r\n]+)/
  )
  ingredients.map!{|i| [ i[0].strip.to_i, (i[1].to_s.match(/m?l|dash(?:es)?/) ? "liquid" : "dry"), i[2].strip.gsub(/[^A-Za-z0-9]+/, ?_) ] }


  the_method.vars = ingredients
  cmethods << the_method

end

#abort ingredients.inspect

# PARSING END

$HEADER.gsub!(/\$\$([^\$]+)\$\$/) { |macro|
    case $1
    when "ALL_DRY_INGREDIENTS_ADDED"
      ingredients.select{|i|i[1] == "dry"}.map{|i| "#{i[2]}.value" }.join(" + ")
    when "DESCRIPTION"
      if $content[1].match(/^Ingredients\.\s*\n/m)
        String.new
      else
        $content[1].split(?\n).map{|i| "// #{i}" }.join("\n")
      end
    end
}

puts $HEADER
